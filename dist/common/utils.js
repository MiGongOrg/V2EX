'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _wepy = require('./../npm/wepy/lib/wepy.js');

var _wepy2 = _interopRequireDefault(_wepy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  replace: function replace(data, type) {
    for (var i = data.length - 1; i >= 0; i--) {
      var avatar = data[i].member[type];
      var created = data[i].created;
      // 替换头像URL
      data[i].member[type] = avatar.replace('//', 'https://');

      var defaultAvatar = avatar.split('?s=24');

      if (defaultAvatar.length > 1) {
        data[i].member[type] = avatar.replace('?s=24', '?s=100');
      } else {
        data[i].member[type] = avatar.replace('_mini', '_large');
      }

      // 替换日期格式
      data[i].created = this.timeDiff(created);
      // 替换 node 头像
      if (data[i].node) {
        var nodeAvatar = data[i].node.avatar_normal;
        data[i].node.avatar_normal = nodeAvatar.replace('//', 'https://');
      }
    }
    return data;
  },
  timeDiff: function timeDiff(dateTime) {
    var day = void 0,
        dayC = void 0,
        diffVal = void 0,
        halfamonth = void 0,
        hour = void 0,
        hourC = void 0,
        minC = void 0,
        minute = void 0,
        month = void 0,
        monthC = void 0,
        now = void 0,
        result = void 0,
        weekC = void 0;
    minute = 1000 * 60;
    hour = minute * 60;
    day = hour * 24;
    halfamonth = day * 15;
    month = day * 30;
    now = new Date().getTime();
    diffVal = now - dateTime * 1000;
    if (diffVal < 0) {
      return console.log('当前时间出错');
    }
    monthC = diffVal / month;
    weekC = diffVal / (7 * day);
    dayC = diffVal / day;
    hourC = diffVal / hour;
    minC = diffVal / minute;
    if (monthC >= 1) {
      result = '' + parseInt(monthC) + '月前';
    } else if (weekC >= 1) {
      result = '' + parseInt(weekC) + '周前';
    } else if (dayC >= 1) {
      result = '' + parseInt(dayC) + '天前';
    } else if (hourC >= 1) {
      result = '' + parseInt(hourC) + '小时前';
    } else if (minC >= 1) {
      result = '' + parseInt(minC) + '分钟前';
    } else {
      result = '刚刚';
    }
    return result;
  },
  changeImgUrl: function changeImgUrl(str) {
    var result = void 0,
        srcArr = [];
    var regexp = /!\[.*?\]\((.*?)\)/g;

    while ((result = regexp.exec(str)) !== null) {
      srcArr.push(result[1]);
    }

    for (var i = srcArr.length - 1; i >= 0; i--) {
      str = str.replace(/!\[.*?\]\(.*?\)/i, '<image src="' + srcArr[i] + '"></image>');
    }
    return str;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIl0sIm5hbWVzIjpbInJlcGxhY2UiLCJkYXRhIiwidHlwZSIsImkiLCJsZW5ndGgiLCJhdmF0YXIiLCJtZW1iZXIiLCJjcmVhdGVkIiwiZGVmYXVsdEF2YXRhciIsInNwbGl0IiwidGltZURpZmYiLCJub2RlIiwibm9kZUF2YXRhciIsImF2YXRhcl9ub3JtYWwiLCJkYXRlVGltZSIsImRheSIsImRheUMiLCJkaWZmVmFsIiwiaGFsZmFtb250aCIsImhvdXIiLCJob3VyQyIsIm1pbkMiLCJtaW51dGUiLCJtb250aCIsIm1vbnRoQyIsIm5vdyIsInJlc3VsdCIsIndlZWtDIiwiRGF0ZSIsImdldFRpbWUiLCJjb25zb2xlIiwibG9nIiwicGFyc2VJbnQiLCJjaGFuZ2VJbWdVcmwiLCJzdHIiLCJzcmNBcnIiLCJyZWdleHAiLCJleGVjIiwicHVzaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7OztrQkFFZTtBQUNiQSxTQURhLG1CQUNKQyxJQURJLEVBQ0VDLElBREYsRUFDUTtBQUNuQixTQUFLLElBQUlDLElBQUlGLEtBQUtHLE1BQUwsR0FBYyxDQUEzQixFQUE4QkQsS0FBSyxDQUFuQyxFQUFzQ0EsR0FBdEMsRUFBMkM7QUFDekMsVUFBSUUsU0FBU0osS0FBS0UsQ0FBTCxFQUFRRyxNQUFSLENBQWVKLElBQWYsQ0FBYjtBQUNBLFVBQUlLLFVBQVVOLEtBQUtFLENBQUwsRUFBUUksT0FBdEI7QUFDQTtBQUNBTixXQUFLRSxDQUFMLEVBQVFHLE1BQVIsQ0FBZUosSUFBZixJQUF1QkcsT0FBT0wsT0FBUCxDQUFlLElBQWYsRUFBcUIsVUFBckIsQ0FBdkI7O0FBRUEsVUFBSVEsZ0JBQWdCSCxPQUFPSSxLQUFQLENBQWEsT0FBYixDQUFwQjs7QUFFQSxVQUFJRCxjQUFjSixNQUFkLEdBQXVCLENBQTNCLEVBQThCO0FBQzVCSCxhQUFLRSxDQUFMLEVBQVFHLE1BQVIsQ0FBZUosSUFBZixJQUF1QkcsT0FBT0wsT0FBUCxDQUFlLE9BQWYsRUFBd0Is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QUE2QztBQUMzQytCLFlBQU1BLElBQUlsQyxPQUFKLENBQVksa0JBQVosRUFBZ0MsaUJBQWlCbUMsT0FBT2hDLENBQVAsQ0FBakIsR0FBNkIsWUFBN0QsQ0FBTjtBQUNEO0FBQ0QsV0FBTytCLEdBQVA7QUFDRDtBQXRFWSxDIiwiZmlsZSI6InV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHdlcHkgZnJvbSAnd2VweSdcblxuZXhwb3J0IGRlZmF1bHQge1xuICByZXBsYWNlIChkYXRhLCB0eXBlKSB7XG4gICAgZm9yICh2YXIgaSA9IGRhdGEubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGxldCBhdmF0YXIgPSBkYXRhW2ldLm1lbWJlclt0eXBlXVxuICAgICAgbGV0IGNyZWF0ZWQgPSBkYXRhW2ldLmNyZWF0ZWRcbiAgICAgIC8vIOabv+aNouWktOWDj1VSTFxuICAgICAgZGF0YVtpXS5tZW1iZXJbdHlwZV0gPSBhdmF0YXIucmVwbGFjZSgnLy8nLCAnaHR0cHM6Ly8nKVxuXG4gICAgICBsZXQgZGVmYXVsdEF2YXRhciA9IGF2YXRhci5zcGxpdCgnP3M9MjQnKVxuXG4gICAgICBpZiAoZGVmYXVsdEF2YXRhci5sZW5ndGggPiAxKSB7XG4gICAgICAgIGRhdGFbaV0ubWVtYmVyW3R5cGVdID0gYXZhdGFyLnJlcGxhY2UoJz9zPTI0JywgJz9zPTEwMCcpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhW2ldLm1lbWJlclt0eXBlXSA9IGF2YXRhci5yZXBsYWNlKCdfbWluaScsICdfbGFyZ2UnKVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyDmm7/mjaLml6XmnJ/moLzlvI9cbiAgICAgIGRhdGFbaV0uY3JlYXRlZCA9IHRoaXMudGltZURpZmYoY3JlYXRlZClcbiAgICAgIC8vIOabv+aNoiBub2RlIOWktOWDj1xuICAgICAgaWYgKGRhdGFbaV0ubm9kZSkge1xuICAgICAgICBsZXQgbm9kZUF2YXRhciA9IGRhdGFbaV0ubm9kZS5hdmF0YXJfbm9ybWFsXG4gICAgICAgIGRhdGFbaV0ubm9kZS5hdmF0YXJfbm9ybWFsID0gbm9kZUF2YXRhci5yZXBsYWNlKCcvLycsICdodHRwczovLycpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhXG4gIH0sXG4gIHRpbWVEaWZmIChkYXRlVGltZSkge1xuICAgIGxldCBkYXksIGRheUMsIGRpZmZWYWwsIGhhbGZhbW9udGgsIGhvdXIsIGhvdXJDLCBtaW5DLCBtaW51dGUsIG1vbnRoLCBtb250aEMsIG5vdywgcmVzdWx0LCB3ZWVrQztcbiAgICBtaW51dGUgPSAxMDAwICogNjA7XG4gICAgaG91ciA9IG1pbnV0ZSAqIDYwO1xuICAgIGRheSA9IGhvdXIgKiAyNDtcbiAgICBoYWxmYW1vbnRoID0gZGF5ICogMTU7XG4gICAgbW9udGggPSBkYXkgKiAzMDtcbiAgICBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBkaWZmVmFsID0gbm93IC0gZGF0ZVRpbWUgKiAxMDAwO1xuICAgIGlmIChkaWZmVmFsIDwgMCkge1xuICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKCflvZPliY3ml7bpl7Tlh7rplJknKTtcbiAgICB9XG4gICAgbW9udGhDID0gZGlmZlZhbCAvIG1vbnRoO1xuICAgIHdlZWtDICA9IGRpZmZWYWwgLyAoNyAqIGRheSk7XG4gICAgZGF5QyAgID0gZGlmZlZhbCAvIGRheTtcbiAgICBob3VyQyAgPSBkaWZmVmFsIC8gaG91cjtcbiAgICBtaW5DICAgPSBkaWZmVmFsIC8gbWludXRlO1xuICAgIGlmIChtb250aEMgPj0gMSkge1xuICAgICAgcmVzdWx0ID0gJycgKyBwYXJzZUludChtb250aEMpICsgJ+aciOWJjSc7XG4gICAgfSBlbHNlIGlmICh3ZWVrQyA+PSAxKSB7XG4gICAgICByZXN1bHQgPSAnJyArIHBhcnNlSW50KHdlZWtDKSArICflkajliY0nO1xuICAgIH0gZWxzZSBpZiAoZGF5QyA+PSAxKSB7XG4gICAgICByZXN1bHQgPSAnJyArIHBhcnNlSW50KGRheUMpICsgJ+WkqeWJjSc7XG4gICAgfSBlbHNlIGlmIChob3VyQyA+PSAxKSB7XG4gICAgICByZXN1bHQgPSAnJyArIHBhcnNlSW50KGhvdXJDKSArICflsI/ml7bliY0nO1xuICAgIH0gZWxzZSBpZiAobWluQyA+PSAxKSB7XG4gICAgICByZXN1bHQgPSAnJyArIHBhcnNlSW50KG1pbkMpICsgJ+WIhumSn+WJjSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9ICfliJrliJonO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICBjaGFuZ2VJbWdVcmwgKHN0cikge1xuICAgIGxldCByZXN1bHQsIHNyY0FyciA9IFtdO1xuICAgIGxldCByZWdleHAgPSAvIVxcWy4qP1xcXVxcKCguKj8pXFwpL2c7XG5cbiAgICB3aGlsZSAoKHJlc3VsdD1yZWdleHAuZXhlYyhzdHIpKSAhPT0gbnVsbCkge1xuICAgICAgc3JjQXJyLnB1c2gocmVzdWx0WzFdKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gc3JjQXJyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBzdHIgPSBzdHIucmVwbGFjZSgvIVxcWy4qP1xcXVxcKC4qP1xcKS9pLCAnPGltYWdlIHNyYz1cIicgKyBzcmNBcnJbaV0gKyAnXCI+PC9pbWFnZT4nKVxuICAgIH1cbiAgICByZXR1cm4gc3RyO1xuICB9XG59XG4iXX0=